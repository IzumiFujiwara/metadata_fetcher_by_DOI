<html xmlns:o="urn:schemas-microsoft-com:office:office"
xmlns="http://www.w3.org/TR/REC-html40">

<head>
<meta http-equiv=Content-Type content="text/x-ms-odc; charset=utf-8">
<meta name=ProgId content=ODC.Database>
<meta name=SourceType content=OLEDB>
<title>クエリ - DOI</title>
<xml id=docprops><o:DocumentProperties
  xmlns:o="urn:schemas-microsoft-com:office:office"
  xmlns="http://www.w3.org/TR/REC-html40">
  <o:Description>ブック内の 'DOI' クエリへの接続です。</o:Description>
  <o:Name>クエリ - DOI</o:Name>
 </o:DocumentProperties>
</xml><xml id=msodc><odc:OfficeDataConnection
  xmlns:odc="urn:schemas-microsoft-com:office:odc"
  xmlns="http://www.w3.org/TR/REC-html40">
  <odc:PowerQueryConnection odc:Type="OLEDB">
   <odc:ConnectionString>Provider=Microsoft.Mashup.OleDb.1;Data Source=$Workbook$;Location=DOI;Extended Properties=&quot;&quot;</odc:ConnectionString>
   <odc:CommandType>SQL</odc:CommandType>
   <odc:CommandText>SELECT * FROM [DOI]</odc:CommandText>
  </odc:PowerQueryConnection>
  <odc:PowerQueryMashupData>&lt;Mashup xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns=&quot;http://schemas.microsoft.com/DataMashup&quot;&gt;&lt;Client&gt;EXCEL&lt;/Client&gt;&lt;Version&gt;2.130.527.0&lt;/Version&gt;&lt;MinVersion&gt;2.21.0.0&lt;/MinVersion&gt;&lt;Culture&gt;ja-JP&lt;/Culture&gt;&lt;SafeCombine&gt;true&lt;/SafeCombine&gt;&lt;Items&gt;&lt;Query Name=&quot;DOI&quot;&gt;&lt;Formula&gt;&lt;![CDATA[let&#13;&#10;    // テーブルDOIからDOIを取得&#13;&#10;    ソース = Excel.CurrentWorkbook(){[Name=&quot;DOI&quot;]}[Content],&#13;&#10;    変更された型 = Table.TransformColumnTypes(ソース,{{&quot;DOI&quot;, type text}}),&#13;&#10;    // カスタム関数 getUnpaywallにDOIを渡してデータを取得&#13;&#10;    呼び出されたカスタム関数 = Table.AddColumn(変更された型, &quot;getUnpaywall&quot;, each getUnpaywall([DOI])),&#13;&#10;    // エラーはnullに置換&#13;&#10;    置換されたエラー = Table.ReplaceErrorValues(呼び出されたカスタム関数, {{&quot;getUnpaywall&quot;, null}}),&#13;&#10;    // データをテーブルに展開&#13;&#10;    #&quot;展開された getUnpaywall&quot; = Table.ExpandTableColumn(置換されたエラー, &quot;getUnpaywall&quot;, &#13;&#10;        {&#13;&#10;            &quot;DOI&quot;, &quot;issn&quot;, &quot;journal_name&quot;, &quot;article title&quot;, &quot;is_oa&quot;, &quot;oa_status&quot;, &quot;oa_location.license&quot;,&quot;oa_location.url&quot;,  &quot;oa_location.url_for_pdf&quot;&#13;&#10;        }, &#13;&#10;        {&#13;&#10;            &quot;Unpaywall.DOI&quot;, &quot;Unpaywall.issn&quot;, &quot;Unpaywall.journal_name&quot;, &quot;Unpaywall.article title&quot;, &quot;Unpaywall.is_oa&quot;, &quot;Unpaywall.oa_status&quot;, &#13;&#10;         &quot;Unpaywall.oa_location.license&quot;,&quot;Unpaywall.oa_location.url&quot;,  &quot;Unpaywall.oa_location.url_for_pdf&quot;&#13;&#10;         }),&#13;&#10;    // カスタム関数 getSCPJurlにISSNを渡してURLを取得、列SCPJとして追加する&#13;&#10;    呼び出されたカスタム関数1 = Table.AddColumn(#&quot;展開された getUnpaywall&quot;, &quot;SCPJ&quot;, each getSCPJurl([Unpaywall.issn])),&#13;&#10;    // エラーは N/A に置換&#13;&#10;    置換されたエラー1 = Table.ReplaceErrorValues(呼び出されたカスタム関数1, {{&quot;SCPJ&quot;, &quot;N/A&quot;}}),&#13;&#10;    // カスタム関数 getSherpaにISSNを渡してデータ（URL)を取得、列uriとして追加する&#13;&#10;    呼び出されたカスタム関数2 = Table.AddColumn(置換されたエラー1, &quot;uri&quot;, each getSherpa([Unpaywall.issn])),&#13;&#10;    // エラーは N/A に置換&#13;&#10;    置換されたエラー2 = Table.ReplaceErrorValues(呼び出されたカスタム関数2, {{&quot;uri&quot;, &quot;N/A&quot;}}),&#13;&#10;    // 列を並び替えて uri を2列目に&#13;&#10;    並べ替えられた列 = Table.ReorderColumns(置換されたエラー2,&#13;&#10;        {&#13;&#10;            &quot;DOI&quot;, &quot;uri&quot;, &quot;Unpaywall.DOI&quot;, &quot;Unpaywall.issn&quot;, &quot;Unpaywall.journal_name&quot;, &quot;Unpaywall.article title&quot;, &#13;&#10;         &quot;Unpaywall.is_oa&quot;, &quot;Unpaywall.oa_status&quot;, &quot;Unpaywall.oa_location.license&quot;, &quot;Unpaywall.oa_location.url&quot;, &#13;&#10;         &quot;Unpaywall.oa_location.url_for_pdf&quot;,&quot;SCPJ&quot;&#13;&#10;         }),&#13;&#10;    // 型を変換&#13;&#10;    変更された型1 = Table.TransformColumnTypes(並べ替えられた列,&#13;&#10;    {&#13;&#10;        {&quot;uri&quot;, type text}, {&quot;Unpaywall.DOI&quot;, type text}, {&quot;Unpaywall.issn&quot;, type text}, {&quot;Unpaywall.journal_name&quot;, type text},&#13;&#10;        {&quot;Unpaywall.article title&quot;, type text}, {&quot;Unpaywall.is_oa&quot;, type logical}, {&quot;Unpaywall.oa_status&quot;, type text},&#13;&#10;        {&quot;Unpaywall.oa_location.license&quot;, type text}, {&quot;Unpaywall.oa_location.url&quot;, type text},&#13;&#10;        {&quot;Unpaywall.oa_location.url_for_pdf&quot;, type text}, {&quot;SCPJ&quot;, type text}&#13;&#10;    }),&#13;&#10;    // 列DOIを削除&#13;&#10;    削除された列 = Table.RemoveColumns(変更された型1,{&quot;Unpaywall.DOI&quot;})&#13;&#10;in&#13;&#10;    削除された列]]&gt;&lt;/Formula&gt;&lt;IsParameterQuery xsi:nil=&quot;true&quot; /&gt;&lt;IsDirectQuery xsi:nil=&quot;true&quot; /&gt;&lt;/Query&gt;&lt;Query Name=&quot;getUnpaywall&quot;&gt;&lt;Formula&gt;&lt;![CDATA[(DOI as text) =&gt;&#13;&#10;    let&#13;&#10;        unpaywall = Web.Contents(&quot;https://api.unpaywall.org/v2&quot;, &#13;&#10;            [ RelativePath = DOI , ApiKeyName = &quot;email&quot; , ManualStatusHandling={400, 404, 500} ]),&#13;&#10;        // ステータスコードのチェック&#13;&#10;        status = Value.Metadata(unpaywall)[Response.Status], &#13;&#10;        unpaywallSource = Table.FromColumns({Lines.FromBinary(unpaywall, null, null)}),&#13;&#10;        // Transform each line using Json.Document&#13;&#10;        #&quot;Transformed Column&quot; = Table.TransformColumns(unpaywallSource, {&quot;Column1&quot;, Json.Document}),&#13;&#10;        // DOI, ISSN, Journal Name, Article title, is_oa, oa Status, Best oa Locationの値を取り出してテーブルにセット&#13;&#10;        #&quot;展開された Column1&quot; = Table.ExpandRecordColumn(&#13;&#10;        #&quot;Transformed Column&quot;, &quot;Column1&quot;, &#13;&#10;        {&quot;doi&quot;, &quot;journal_issn_l&quot;, &quot;journal_name&quot;, &quot;title&quot;,         &quot;is_oa&quot;, &quot;oa_status&quot;, &quot;best_oa_location&quot;},&#13;&#10;        {&quot;DOI&quot;, &quot;issn&quot;,           &quot;journal_name&quot;, &quot;article title&quot;, &quot;is_oa&quot;, &quot;oa_status&quot;, &quot;Column1.best_oa_location&quot;}&#13;&#10;        ),&#13;&#10;        // Column1.best_oa_locationからのoa_location.license,oa_uri,url_for_pdfを取り出してテーブルに追加&#13;&#10;        #&quot;unpaywalldata&quot; = Table.ExpandRecordColumn(&#13;&#10;            #&quot;展開された Column1&quot;, &quot;Column1.best_oa_location&quot;, &#13;&#10;            {&quot;license&quot;,            &quot;url&quot;,              &quot;url_for_pdf&quot;}, &#13;&#10;            {&quot;oa_location.license&quot;,&quot;oa_location.url&quot;,  &quot;oa_location.url_for_pdf&quot;}&#13;&#10;            )&#13;&#10;    in&#13;&#10;        // 404エラーならnullを返す&#13;&#10;        if status = 404 then null else &#13;&#10;        #&quot;unpaywalldata&quot;]]&gt;&lt;/Formula&gt;&lt;IsParameterQuery xsi:nil=&quot;true&quot; /&gt;&lt;IsDirectQuery xsi:nil=&quot;true&quot; /&gt;&lt;/Query&gt;&lt;Query Name=&quot;getSCPJurl&quot;&gt;&lt;Formula&gt;&lt;![CDATA[(ISSN as text) =&gt;&#13;&#10;    let&#13;&#10;        SCPJ_baseurl = &quot;https://app.lib.shimane-u.ac.jp/policy_checker/scpj.php?mode=getPolicyFromIDs&amp;ids=&quot;,&#13;&#10;        SCPJ_url     = Text.Combine({SCPJ_baseurl, ISSN})&#13;&#10;    in&#13;&#10;        if ISSN = null then null else &#13;&#10;        SCPJ_url]]&gt;&lt;/Formula&gt;&lt;IsParameterQuery xsi:nil=&quot;true&quot; /&gt;&lt;IsDirectQuery xsi:nil=&quot;true&quot; /&gt;&lt;/Query&gt;&lt;Query Name=&quot;getSherpa&quot;&gt;&lt;Formula&gt;&lt;![CDATA[(ISSN as text) =&gt;&#13;&#10;    let&#13;&#10;    // sherpa seriveのAPIからJSONを取得&#13;&#10;        queryparameter = [ #&quot;item-type&quot; = &quot;publication&quot;, format = &quot;Json&quot; , identifier = ISSN ],&#13;&#10;        SherpaSource = Web.Contents(&quot;https://v2.sherpa.ac.uk/cgi&quot; , &#13;&#10;        [   RelativePath=&quot;retrieve_by_id/cgi/retrieve_by_id&quot;, &#13;&#10;            ApiKeyName = &quot;api-key&quot;,&#13;&#10;            Query =  queryparameter, &#13;&#10;            ManualStatusHandling={400, 404, 500}&#13;&#10;            ]&#13;&#10;        ),&#13;&#10;        status = Value.Metadata(SherpaSource)[Response.Status], &#13;&#10;        oauri = Json.Document(SherpaSource)[items]{0}[system_metadata][uri]&#13;&#10;    in&#13;&#10;        if status = 404 then null else &#13;&#10;        oauri]]&gt;&lt;/Formula&gt;&lt;IsParameterQuery xsi:nil=&quot;true&quot; /&gt;&lt;IsDirectQuery xsi:nil=&quot;true&quot; /&gt;&lt;/Query&gt;&lt;/Items&gt;&lt;/Mashup&gt;</odc:PowerQueryMashupData>
 </odc:OfficeDataConnection>
</xml>
<style>
<!--
    .ODCDataSource
    {
    behavior: url(dataconn.htc);
    }
-->
</style>
 
</head>

<body onload='init()' scroll=no leftmargin=0 topmargin=0 rightmargin=0 style='border: 0px'>
<table style='border: solid 1px threedface; height: 100%; width: 100%' cellpadding=0 cellspacing=0 width='100%'> 
  <tr> 
    <td id=tdName style='font-family:arial; font-size:medium; padding: 3px; background-color: threedface'> 
      &nbsp; 
    </td> 
     <td id=tdTableDropdown style='padding: 3px; background-color: threedface; vertical-align: top; padding-bottom: 3px'>

      &nbsp; 
    </td> 
  </tr> 
  <tr> 
    <td id=tdDesc colspan='2' style='border-bottom: 1px threedshadow solid; font-family: Arial; font-size: 1pt; padding: 2px; background-color: threedface'>

      &nbsp; 
    </td> 
  </tr> 
  <tr> 
    <td colspan='2' style='height: 100%; padding-bottom: 4px; border-top: 1px threedhighlight solid;'> 
      <div id='pt' style='height: 100%' class='ODCDataSource'></div> 
    </td> 
  </tr> 
</table> 

  
<script language='javascript'> 

function init() { 
  var sName, sDescription; 
  var i, j; 
  
  try { 
    sName = unescape(location.href) 
  
    i = sName.lastIndexOf(".") 
    if (i>=0) { sName = sName.substring(1, i); } 
  
    i = sName.lastIndexOf("/") 
    if (i>=0) { sName = sName.substring(i+1, sName.length); } 

    document.title = sName; 
    document.getElementById("tdName").innerText = sName; 

    sDescription = document.getElementById("docprops").innerHTML; 
  
    i = sDescription.indexOf("escription>") 
    if (i>=0) { j = sDescription.indexOf("escription>", i + 11); } 

    if (i>=0 && j >= 0) { 
      j = sDescription.lastIndexOf("</", j); 

      if (j>=0) { 
          sDescription = sDescription.substring(i+11, j); 
        if (sDescription != "") { 
            document.getElementById("tdDesc").style.fontSize="x-small"; 
          document.getElementById("tdDesc").innerHTML = sDescription; 
          } 
        } 
      } 
    } 
  catch(e) { 

    } 
  } 
</script> 

</body> 
 
</html>
